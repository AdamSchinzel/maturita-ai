import { useState } from "react";
import {
  Alert,
  AlertDescription,
  AlertIcon,
  AlertTitle,
  Button,
  CloseButton,
  Flex,
  Heading,
  Input,
  Select,
  Tab,
  TabList,
  TabPanel,
  TabPanels,
  Tabs,
  Text,
  useDisclosure,
  useToast,
  VStack,
} from "@chakra-ui/react";

const Home = () => {
  const [title, setTitle] = useState<string>("");
  const [autor, setAutor] = useState<string>("");
  const [question, setQuestion] = useState<string>("");
  const [about, setAbout] = useState<string>("");
  const [language, setLanguage] = useState<string>("");
  const [type, setType] = useState<string>("");

  const [loadingBook, setLoadingBook] = useState<boolean>(false);
  const [loadingQuestion, setLoadingQuestion] = useState<boolean>(false);
  const [loadingSeminarWork, setLoadingSeminarWork] = useState<boolean>(false);

  const [bookDescription, setbookDescription] = useState<string>("");
  const [questionDescription, setQuestionDescription] = useState<string>("");
  const [seminarWork, setSeminarWork] = useState<string>("");

  const { isOpen, onClose } = useDisclosure({ defaultIsOpen: true });

  const bookPrompt = `Popi≈° detailnƒõ tyto body o kn√≠≈æce ${title} od ${autor} (zobraz v HTML k√≥du a m√≠sto /n d√°vej <br>, v≈°echny n√°zvy knih pi≈° ƒçesky): Autor, Doba vyd√°n√≠, Liter√°rn√≠ druh, Liter√°rn√≠ ≈æ√°nr, Forma vypr√°vƒõn√≠, T√©ma a motiv, T√©maticky podobn√° d√≠la, ƒåasoprostor, Kompoziƒçn√≠ v√Ωstavba, ≈Ωivotopis autora, Souvisej√≠c√≠ auto≈ôi, Hlavn√≠ postavy a jejich charakteristika, Dƒõj a obsah p≈ô√≠bƒõhu`;
  const questionPrompt = `Sepi≈° mi v tƒõchto bodech (minim√°lnƒõ 400 slov) maturitn√≠ ot√°zku na t√©ma ${question} (zobraz v HTML k√≥du a m√≠sto /n d√°vej <br> a v≈°echny odkazy se budou otev√≠rat v nov√©m oknƒõ a budou m√≠t podtr≈æen√≠): √övod do ot√°zky, Obsah rozepi≈° obs√°hle a do detailu, Odkazy na zaj√≠mav√© a relavantn√≠ zdroje na internetu s ƒçesk√Ωm obsahem, Z√°vƒõr.`;
  const seminarWorkPrompt = `Napi≈° ${type} na t√©ma ${about} v jazyce ${language} v rozsahu minim√°lnƒõ 300 slov (zobraz v HTML k√≥du a m√≠sto /n d√°vej <br>), text rozdƒõl do odstavc≈Ø a nahoru napi≈° tuƒçn√Ωm p√≠smem t√©ma pr√°ce. Na konci pr√°ce udelƒõj dva pr√°dzn√© ≈ô√°dky a napi≈° co je typick√© pro tento sloh√Ω √∫tvar`;

  const fetchBook = async () => {
    setLoadingBook(true);

    const response = await fetch("/api/book", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt: bookPrompt,
      }),
    });

    const data = response.body;
    if (!data) {
      return;
    }

    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;

    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      const chunkValue = decoder.decode(value);
      setbookDescription((prev) => prev + chunkValue);
    }

    setTitle("");
    setAutor("");
    setLoadingBook(false);
  };

  const fetchQuestion = async () => {
    setLoadingQuestion(true);

    const response = await fetch("/api/question", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt: questionPrompt,
      }),
    });

    const data = response.body;
    if (!data) {
      return;
    }

    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;

    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      const chunkValue = decoder.decode(value);
      setQuestionDescription((prev) => prev + chunkValue);
    }

    setQuestion("");
    setLoadingQuestion(false);
  };

  const fetchSeminarWork = async () => {
    setLoadingSeminarWork(true);

    const response = await fetch("/api/seminar-work", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt: seminarWorkPrompt,
      }),
    });

    const data = response.body;
    if (!data) {
      return;
    }

    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;

    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      const chunkValue = decoder.decode(value);
      setSeminarWork((prev) => prev + chunkValue);
    }

    setAbout("");
    setLanguage("");
    setType("");
    setLoadingSeminarWork(false);
  };

  return (
    <Flex direction="column" alignItems="center" height="100vh">
      <Heading size="xl" pt={16} pb={3} px={3}>
        Maturita AI (üë®‚Äçüéì, üß†)
      </Heading>
      <Flex alignItems="center" px={3}>
        <Text fontSize="lg" textAlign="center" mr={2}>
          Umƒõl√° inteligence pro vypracov√°n√≠ knih, ot√°zek k maturitƒõ nebo naps√°n√≠ p√≠semn√© pr√°ce.
        </Text>
      </Flex>
      <Tabs colorScheme="cyan" mt={10} w="75%">
        <TabList>
          <Tab>Knihy</Tab>
          <Tab>Ot√°zky</Tab>
          <Tab>P√≠semn√° pr√°ce</Tab>
        </TabList>
        <TabPanels>
          <TabPanel>
            <Flex flexDir="column">
              <Input
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="N√°zev d√≠la"
                mb={3}
                isDisabled={loadingBook}
                colorScheme="cyan"
              />
              <Input
                value={autor}
                onChange={(e) => setAutor(e.target.value)}
                placeholder="Autor"
                mb={5}
                isDisabled={loadingBook}
                colorScheme="cyan"
              />
              <Button
                variant="solid"
                colorScheme="cyan"
                onClick={fetchBook}
                isDisabled={loadingBook || !title || !autor}>
                Vypracovat knihu
              </Button>
            </Flex>
            {isOpen && (
              <Alert status="warning" mt={5} rounded={6}>
                <AlertIcon w={30} />
                <VStack width="100%" align="left" spacing={1} ml={2}>
                  <AlertTitle textAlign="left">Mo≈æn√© chyby v d√≠lech ƒçesk√© literatury</AlertTitle>
                  <AlertDescription textAlign="left">
                    Tento model umƒõl√© inteligence nƒõkdy postr√°d√° informace o knih√°ch z ƒçesk√© literatury.
                  </AlertDescription>
                </VStack>
                <CloseButton alignSelf="flex-start" position="relative" right={0} top={-1} onClick={onClose} />
              </Alert>
            )}
            {bookDescription && (
              <>
                <Text fontSize="2xl" fontWeight="bold" mt={10}>
                  V√Ωsledek
                </Text>
                <div style={{ marginTop: "10px" }} dangerouslySetInnerHTML={{ __html: bookDescription }}></div>
              </>
            )}
          </TabPanel>
          <TabPanel>
            <Flex flexDir={["column"]}>
              <Input
                value={question}
                onChange={(e) => setQuestion(e.target.value)}
                placeholder="N√°zev ot√°zky"
                mb={5}
                isDisabled={loadingQuestion}
                colorScheme="cyan"
              />
              <Button
                variant="solid"
                colorScheme="cyan"
                onClick={fetchQuestion}
                isDisabled={loadingQuestion || !question}>
                Vypracovat ot√°zku
              </Button>
            </Flex>
            {questionDescription && (
              <>
                <Text fontSize="2xl" fontWeight="bold" mt={10}>
                  V√Ωsledek
                </Text>
                <div style={{ marginTop: "10px" }} dangerouslySetInnerHTML={{ __html: questionDescription }}></div>
              </>
            )}
          </TabPanel>
          <TabPanel>
            <Flex flexDir={["column"]}>
              <Input
                value={about}
                onChange={(e) => setAbout(e.target.value)}
                placeholder="T√©ma semin√°rn√≠ pr√°ce"
                mb={3}
                isDisabled={loadingSeminarWork}
                colorScheme="cyan"
              />
              <Select
                onChange={(e) => setLanguage(e.target.value)}
                value={language}
                colorScheme="cyan"
                mb={3}
                isDisabled={loadingSeminarWork}
                placeholder="Vyberte jazyk">
                <option value="ƒåe≈°tina">ƒåestina</option>
                <option value="Angliƒçtina">Angliƒçtina</option>
                <option value="≈†panƒõl≈°tina">≈†panƒõl≈°tina</option>
                <option value="Francouz≈°tina">Francouz≈°tina</option>
                <option value="Ru≈°tina">Ru≈°tina</option>
              </Select>
              <Select
                onChange={(e) => setType(e.target.value)}
                value={type}
                colorScheme="cyan"
                mb={5}
                isDisabled={loadingSeminarWork}
                placeholder="Vyberte slohov√Ω √∫tvar">
                <option value="vypr√°vƒõn√≠">Vypr√°vƒõn√≠</option>
                <option value="form√°ln√≠ dopis">Form√°ln√≠ dopis</option>
                <option value="√∫vaha">√övaha</option>
                <option value="report√°≈æ">Report√°≈æ</option>
              </Select>
              <Button
                variant="solid"
                colorScheme="cyan"
                onClick={fetchSeminarWork}
                isDisabled={loadingSeminarWork || !about || !language || !type}>
                Napsat pr√°ci
              </Button>
            </Flex>
            {seminarWork && (
              <>
                <Text fontSize="2xl" fontWeight="bold" mt={10}>
                  V√Ωsledek
                </Text>
                <div style={{ marginTop: "10px" }} dangerouslySetInnerHTML={{ __html: seminarWork }}></div>
              </>
            )}
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Flex>
  );
};

export default Home;
